{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/cpp-constructors","result":{"data":{"markdownRemark":{"id":"2a9bf7f7-912c-5634-9f4a-22faf9963cbb","html":"<ul>\n<li><a href=\"#constructors-as-a-way-of-instatiation\">Constructors as a Way of Instantiation</a></li>\n<li><a href=\"#constructors-get-called-whenever-a-new-instance-is-created\">Constructors get called whenever a new instance is created</a></li>\n<li><a href=\"#related\">Related</a></li>\n</ul>\n<h2 id=\"constructors-as-a-way-of-instantiation\" style=\"position:relative;\"><a href=\"#constructors-as-a-way-of-instantiation\" aria-label=\"constructors as a way of instantiation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constructors as a Way of Instantiation</h2>\n<p>Constructors are a special type of method in a class. A constructor is defined by declaring a function (a method) inside our class with the same name as the class. You may find it easier and cleaner to instantiate objects from a class using a constructor rather than the <a href=\"/posts/cpp-classes-and-objects#syntax\">default method</a>.</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Enemy</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    string name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> health<span class=\"token punctuation\">;</span>\n    string uniqueId<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">Enemy</span><span class=\"token punctuation\">(</span>string t_name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> t_health<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// t_name and t_health can be the same as the actual attribute name</span>\n      <span class=\"token comment\">// it's only done this way to emphasize that it doesn't have to be</span>\n      <span class=\"token comment\">// the same name and health variable</span>\n      name <span class=\"token operator\">=</span> t_name\n      health <span class=\"token operator\">=</span> t_health<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// You don't have to have a parameter for every single attribute.</span>\n      <span class=\"token comment\">// Note how we didn't include the string uniqueId</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Call the constructor to instantiate a new enemy</span>\n  <span class=\"token function\">Enemy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Zombie\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This will create a zombie with 10 health</span>\n  <span class=\"token function\">Enemy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Spider\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This will create a spider with 5 health</span>\n\n  <span class=\"token comment\">// The equivalent default method goes like this,   </span>\n  <span class=\"token comment\">// notice how much code you save if you use constructors</span>\n  Enemy Zombie1<span class=\"token punctuation\">;</span>\n  Zombie1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Zombie\"</span><span class=\"token punctuation\">;</span>\n  Zombie1<span class=\"token punctuation\">.</span>health <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n  Enemy Spider1<span class=\"token punctuation\">;</span>\n  Spider1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Spider\"</span><span class=\"token punctuation\">;</span>\n  Spider1<span class=\"token punctuation\">.</span>health <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"constructors-get-called-whenever-a-new-instance-is-created\" style=\"position:relative;\"><a href=\"#constructors-get-called-whenever-a-new-instance-is-created\" aria-label=\"constructors get called whenever a new instance is created permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constructors get called whenever a new instance is created</h2>\n<p>Besides calling constructors to instantiate an object, the converse is also the same. The constructor also gets called whenever you instantiate an object.</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Enemy</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    string name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> health<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">Enemy</span><span class=\"token punctuation\">(</span>string t_name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> t_health<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      name <span class=\"token operator\">=</span> t_name\n      health <span class=\"token operator\">=</span> t_health<span class=\"token punctuation\">;</span>\n\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"New Enemy!\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Whenever we instantiate, this gets printed</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">Enemy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Zombie1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This will create a zombie with 10 health</span>\n\n  <span class=\"token comment\">// The equivalent default method goes like this,   </span>\n  <span class=\"token comment\">// notice how much code you save if you use constructors</span>\n  Enemy Zombie2<span class=\"token punctuation\">;</span>\n  Zombie2<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Zombie2\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">New Enemy!\nNew Enemy!</code></pre></div>\n<p><code class=\"language-text\">New Enemy!</code> gets printed twice, because we instantiated the first zombie using the constructor, and the second using the <a href=\"/posts/cpp-classes-and-objects#syntax\">default method</a> of instantiation.</p>\n<h2 id=\"related\" style=\"position:relative;\"><a href=\"#related\" aria-label=\"related permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related:</h2>\n<ul>\n<li><a href=\"/posts/cpp-variables\">Variables and Data Types</a></li>\n<li><a href=\"/posts/cpp-functions\">Functions</a></li>\n<li><a href=\"/posts/cpp-classes-and-objects\">Classes and Objects</a></li>\n</ul>","fields":{"slug":"/posts/cpp-constructors","tagSlugs":["/tag/c/","/tag/tutorial/","/tag/classes/","/tag/functions/","/tag/object-oriented-programming/"]},"frontmatter":{"date":"2021-01-20T16:25:03+08:00","description":"Constructors are a special type of method in a class. A constructor is defined by declaring a function (a method) inside our class with the same name as the class","tags":["C++","Tutorial","Classes","Functions","Object Oriented Programming"],"title":"Constructors","socialImage":null}}},"pageContext":{"slug":"/posts/cpp-constructors"}},"staticQueryHashes":["251939775","3942705351","401334301"]}