{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/cpp-stacks","result":{"data":{"markdownRemark":{"id":"a5444dd4-9a5d-59b0-971f-5a88138abe35","html":"<ul>\n<li><a href=\"#makingdeclaring-a-stack-manually-with-arrays\">Making/Declaring a Stack manually with arrays</a></li>\n<li><a href=\"#makingdeclaring-a-stack-using-the-stack-header\">Making/Declaring a Stack using the <stack> header</a></li>\n<li><a href=\"#usage\">Reading and Writing</a></li>\n<li><a href=\"#methodfunctions-available-to-the-stack-header\">Methods/Functions available to the <stack> header</a></li>\n<li><a href=\"#related\">Related</a></li>\n</ul>\n<p>Stacks are homogenous data structures (they can only store elements of the same kind) like arrays, but they’re different from normal arrays such that you can only add or remove items from the top of the stack. This nature is also called, Last in, First out (LIFO).</p>\n<p>Stacks are called such because they function similarly to a real life stack, say for example, a stack of books. If you have a stack of books, you first need to take out items on the very top before you can take out items below it. In short, you can only take out the last thing you put in, and whatever you put in always goes to the top.</p>\n<h2 id=\"makingdeclaring-a-stack-manually-with-arrays\" style=\"position:relative;\"><a href=\"#makingdeclaring-a-stack-manually-with-arrays\" aria-label=\"makingdeclaring a stack manually with arrays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Making/Declaring a Stack manually with arrays</h2>\n<p>To make things simple, we will use <a href=\"/posts/cpp-functions\">functions</a>, we need to have the following three to start with</p>\n<ol>\n<li>Something to display the item at the top</li>\n<li>Something to add(push) items</li>\n<li>Something to remove(pop) items</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> stackName<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8 is the max for our stack, but yours can have any</span>\n<span class=\"token keyword\">int</span> topIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// If our stack is empty then the top is index -1</span>\n                   <span class=\"token comment\">// If it has one thing, top is at index 0, etc</span>\n\n<span class=\"token comment\">// This function lets us see the top element</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> topItem<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>topIndex <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Check first if</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// stack is empty</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> stackName<span class=\"token punctuation\">[</span>topIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This function lets us add items</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  stackName<span class=\"token punctuation\">[</span>topIndex<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n  topIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Let program know that the top is now 1 higher than before</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This function removes the top element</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>topIndex <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Stack underflow!\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    stackName<span class=\"token punctuation\">[</span>topIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Replace top element with 0</span>\n    topIndex<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Should output 6</span>\n  <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Should output 1</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This crude implementation of a stack is not advised because you cannot have multiple stacks in your program. But it’s sufficient in demonstrating the basic capabilities of a stack and its difference from other data structures.</p>\n<h2 id=\"makingdeclaring-a-stack-using-the-stack-header\" style=\"position:relative;\"><a href=\"#makingdeclaring-a-stack-using-the-stack-header\" aria-label=\"makingdeclaring a stack using the stack header permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Making/Declaring a Stack using the <stack> header</h2>\n<p>A much more useful and practical way of dealing with stacks is using the built-in c++ <code class=\"language-cpp\"><span class=\"token operator\">&lt;</span>stack<span class=\"token operator\">></span></code> header.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> stackName<span class=\"token punctuation\">;</span>\n  stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> stack2<span class=\"token punctuation\">;</span>\n\n  stackName<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  stackName<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  stackName<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  cout <span class=\"token operator\">&lt;&lt;</span> stackName<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Should display 9</span>\n\n  stackName<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  stackName<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  cout <span class=\"token operator\">&lt;&lt;</span> stackName<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Should display 3</span>\n\n  stack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To declare a new stack simply follow the declaration syntax</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">stack<span class=\"token operator\">&lt;</span>dataType<span class=\"token operator\">></span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Where name is any valid variable name</span></code></pre></div>\n<p>and you can now access the member functions available to stacks.</p>\n<h2 id=\"methodsfunctions-available-to-the-stack-header\" style=\"position:relative;\"><a href=\"#methodsfunctions-available-to-the-stack-header\" aria-label=\"methodsfunctions available to the stack header permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Methods/Functions available to the <stack> header</h2>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Function</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"language-cpp\"><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></td>\n<td>Returns <code class=\"language-text\">true</code> if the stack is empty, <code class=\"language-text\">false</code> if otherwise</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-cpp\"><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></td>\n<td>Returns an integer representing how many elements are in the stack</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-cpp\"><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></td>\n<td>Returns the top element of the stack</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-cpp\"><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></td>\n<td>Pushes an element to the stack via a parameter</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-cpp\"><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></td>\n<td>Removes the top element of the stack</td>\n</tr>\n</tbody>\n</table>\n<p>To use these methods follow the syntax</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">stackName<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Replacing <code class=\"language-cpp\">stackName</code> and <code class=\"language-cpp\"><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code> with the name of your stack and the method of your choice.</p>\n<h2 id=\"related\" style=\"position:relative;\"><a href=\"#related\" aria-label=\"related permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related:</h2>\n<ul>\n<li><a href=\"/posts/cpp-variables\">Variables and Data Types</a></li>\n<li><a href=\"/posts/cpp-arrays\">Arrays</a></li>\n<li><a href=\"/posts/cpp-functions\">Functions</a></li>\n<li><a href=\"/posts/cpp-structs\">Structs</a></li>\n</ul>","fields":{"slug":"/posts/cpp-stacks","tagSlugs":["/tag/c/","/tag/tutorial/","/tag/stacks/","/tag/data-structures/"]},"frontmatter":{"date":"2020-12-21T16:25:03+08:00","description":"Stacks are homogenous data structures (they can only store elements of the same kind) like arrays, but they're different from normal arrays such that you can only add or remove items from the top of the stack. This nature is also called, Last in, First out (LIFO)","tags":["C++","Tutorial","Stacks","Data Structures"],"title":"Stacks","socialImage":null}}},"pageContext":{"slug":"/posts/cpp-stacks"}},"staticQueryHashes":["251939775","3942705351","401334301"]}