{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/cpp-input-output","result":{"data":{"markdownRemark":{"id":"63816c43-2bed-59f4-8b43-bd931d502e09","html":"<ul>\n<li><a href=\"#output\">Output</a></li>\n<li><a href=\"#input\">Input</a></li>\n<li><a href=\"#using-them-with-variables\">Using them with variables</a></li>\n<li><a href=\"#related\">Related</a></li>\n</ul>\n<p>Input and output in C++ are done with cin >> and cout &#x3C;&#x3C; respectively. Before using them, be sure to include the iostream library header.</p>\n<p>On the top of almost all programs written in c++, you would see the include statement <code class=\"language-text\">#include &lt;iostream&gt;</code>. The iostream library header is what enables us to use <code class=\"language-text\">cin</code> and <code class=\"language-text\">cout</code>, while <code class=\"language-text\">using namespace std;</code> makes it possible to omit <code class=\"language-text\">std::</code> before <code class=\"language-text\">cin</code> and <code class=\"language-text\">cout</code>. Without <code class=\"language-text\">using namespace std;</code> you need to use <code class=\"language-text\">std::cin</code> and <code class=\"language-text\">std::cout</code>.</p>\n<h2 id=\"output\" style=\"position:relative;\"><a href=\"#output\" aria-label=\"output permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Output</h2>\n<p>Output with C++ is done with <code class=\"language-text\">cout</code> which is short for console output. Take note of the direction of the arrows <code class=\"language-text\">&lt;&lt;</code>.</p>\n<p>Example 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello world!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Output 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hello world!</code></pre></div>\n<p>You can output any <a href=\"/posts/cpp-variables\">data type</a>, in this case “Hello world!” is a string, but it can even be a variable. The <code class=\"language-text\">endl</code> after another <code class=\"language-text\">&lt;&lt;</code> denotes a line ending. Take note that everytime you want to output another thing, you can chain or stream your outputs using the <code class=\"language-text\">&lt;&lt;</code> operator.</p>\n<p>Example 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello world!\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" another thing\"</span> <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Now this should be on the next line\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Output 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hello world! another thing\nNow this should be on the next line</code></pre></div>\n<h2 id=\"input\" style=\"position:relative;\"><a href=\"#input\" aria-label=\"input permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Input</h2>\n<p>Input on the other hand is done with <code class=\"language-text\">cin</code> which is short for console input. Take note of the direction of the arrows <code class=\"language-text\">&gt;&gt;</code>. You always definitely need to use <a href=\"/posts/cpp-variables\">variables</a> together with <code class=\"language-text\">cin</code> as you need something to store the user input to.</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iosteram></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> input1<span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please enter a number\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> input1<span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"You have entered \"</span> <span class=\"token operator\">&lt;&lt;</span> input1<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Please enter a number\n50\nYou have entered 50</code></pre></div>\n<p>See how the program first asked the user to input a number? After asking the program, it awaits our input and it will not proceed until we entered our input, in this case I entered <code class=\"language-text\">50</code>. The number we inputted then gets <strong>stored</strong> to an int called <code class=\"language-text\">input1</code>. When we output <code class=\"language-text\">input1</code> it outputs <code class=\"language-text\">50</code> which was what was stored in that variable.</p>\n<h2 id=\"related\" style=\"position:relative;\"><a href=\"#related\" aria-label=\"related permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related:</h2>\n<ul>\n<li><a href=\"/posts/cpp-variables\">Variables and Data Types</a></li>\n<li><a href=\"/posts/cpp-hello-world\">Hello World</a></li>\n</ul>","fields":{"slug":"/posts/cpp-input-output","tagSlugs":["/tag/c/","/tag/tutorial/","/tag/i-o/","/tag/input-output/","/tag/cin/"]},"frontmatter":{"date":"2020-09-15T12:50:03","description":"Input and output in C++ are done with cin >> and cout << respectively. Before using them, be sure to include the iostream library header.","tags":["C++","Tutorial","I/O","Input Output","cin"],"title":"Input and Output","socialImage":null}}},"pageContext":{"slug":"/posts/cpp-input-output"}},"staticQueryHashes":["251939775","3942705351","401334301"]}