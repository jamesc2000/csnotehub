{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/cpp-structs","result":{"data":{"markdownRemark":{"id":"fc2262c9-7c2f-5738-a45c-e83bda2282d5","html":"<ul>\n<li><a href=\"#syntax\">Syntax</a></li>\n<li><a href=\"#usage\">Usage</a></li>\n<li><a href=\"#related\">Related</a></li>\n</ul>\n<p>Structs or structures in c++ are collections of related data items, possibly of different types (heterogenous). The elements inside a struct are called members.</p>\n<p>Structs are different from arrays because arrays can only hold elements with the same data type, while structs can hold members with different or mixed data types.</p>\n<h2 id=\"syntax\" style=\"position:relative;\"><a href=\"#syntax\" aria-label=\"syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Syntax</h2>\n<p>Declaration Syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">StructName</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> member1 <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> member2<span class=\"token punctuation\">;</span>\n  dataType memberName <span class=\"token operator\">=</span> initial_value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nstructName objectName<span class=\"token punctuation\">;</span></code></pre></div>\n<p>To declare a struct we use the above syntax. Note the semicolon after the <code class=\"language-text\">}</code>.\nAfter declaring your own structure, we must instantiate at least one object that uses your struct in order to use it.</p>\n<h2 id=\"usage\" style=\"position:relative;\"><a href=\"#usage\" aria-label=\"usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h2>\n<p>We can access (read or write) values in a structâ€™s member like the following example.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Meal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// A struct with 3 members, calories, cookingTime, and</span>\n    <span class=\"token comment\">// isBeverage. The third member has an initial value</span>\n    <span class=\"token keyword\">double</span> calories<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> cookingTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> isBeverage <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  Meal hamburger<span class=\"token punctuation\">;</span> <span class=\"token comment\">// hamburger is an object name</span>\n  Meal shake<span class=\"token punctuation\">;</span> <span class=\"token comment\">// shake is also an object name</span>\n\n  hamburger<span class=\"token punctuation\">.</span>calories <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n  hamburger<span class=\"token punctuation\">.</span>cookingTime <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// By default all meals are not beverages</span>\n\n  shake<span class=\"token punctuation\">.</span>calories <span class=\"token operator\">=</span> <span class=\"token number\">180.5</span><span class=\"token punctuation\">;</span>\n  shake<span class=\"token punctuation\">.</span>isBeverage <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Override default initial value</span>\n\n  cout <span class=\"token operator\">&lt;&lt;</span> hamburger<span class=\"token punctuation\">.</span>calories<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">.</code> is called the member selector. With the notation <code class=\"language-text\">objName.member</code> we can access the value of that member just like any other variable.</p>\n<h2 id=\"related\" style=\"position:relative;\"><a href=\"#related\" aria-label=\"related permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related:</h2>\n<ul>\n<li><a href=\"/posts/cpp-variables\">Variables and Data Types</a></li>\n<li><a href=\"posts/cpp-arrays\">Arrays</a></li>\n<li><a href=\"/posts/cpp-if-statements-advanced\">If Statements Advanced</a></li>\n</ul>","fields":{"slug":"/posts/cpp-structs","tagSlugs":["/tag/c/","/tag/tutorial/","/tag/structs/","/tag/data-structures/"]},"frontmatter":{"date":"2020-12-06T16:25:03+08:00","description":"Structs or structures in c++ are collections of related data items, possibly of different types (heterogenous).","tags":["C++","Tutorial","Structs","Data Structures"],"title":"Structs","socialImage":null}}},"pageContext":{"slug":"/posts/cpp-structs"}},"staticQueryHashes":["251939775","3942705351","401334301"]}