{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/cpp-functions","result":{"data":{"markdownRemark":{"id":"11e2a715-3a55-5518-b6d4-46070e00e47d","html":"<ul>\n<li><a href=\"#syntax\">Syntax</a></li>\n<li><a href=\"#declaring-and-calling-functions\">Declaring and Calling Functions</a></li>\n<li><a href=\"#parameters-in-functions\">Parameters in Functions</a></li>\n<li><a href=\"#related\">Related</a></li>\n</ul>\n<h2 id=\"syntax\" style=\"position:relative;\"><a href=\"#syntax\" aria-label=\"syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Syntax</h2>\n<p>A function is multiple statements or other functions that are grouped into one. When it is called, the statements and other functions inside are ran. Functions are used to group multiple lines of code that does a bigger or repetitive task to make code more organized and more readable.</p>\n<p>Declaration Syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">function_name</span><span class=\"token punctuation\">(</span>dataType parameter1<span class=\"token punctuation\">,</span> dataType parameter2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Statements or other functions</span>\n  <span class=\"token comment\">// This part is also called the function body</span>\n  <span class=\"token keyword\">return</span> someVariable\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">int</code> - this is the data type of our return value, if the data type is <code class=\"language-text\">void</code> then no return value or return statement is needed.</li>\n<li><code class=\"language-text\">function_name</code> - this can be anything and also follow <a href=\"/posts/cpp-Variables-DataTypes\">variable naming conventions</a></li>\n<li><code class=\"language-text\">(parameter1, parameter2, ...)</code> - parameters are the inputs to your function; these are <strong>optional</strong></li>\n<li><code class=\"language-text\">return someVariable</code> - this is the return statement of your function; in this case our function returns the variable <code class=\"language-text\">someVariable</code></li>\n</ol>\n<p>If the syntax looks familiar to you, that’s because the <code class=\"language-text\">int main()</code> part at every program is a function declaration.</p>\n<h2 id=\"declaring-and-calling-functions\" style=\"position:relative;\"><a href=\"#declaring-and-calling-functions\" aria-label=\"declaring and calling functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Declaring and Calling Functions</h2>\n<p>Similar to variables, functions can be referenced in other parts of code in order to run them.</p>\n<p>A function is created (but not ran yet) at its declaration. For example we want to create a function that asks the age of 2 users and stores each in separate variables.</p>\n<p>Example 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Declare askAge() function</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">askAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter your age: \"</span><span class=\"token punctuation\">;</span>\n  cin <span class=\"token operator\">>></span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Main function</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"User 1\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> age1 <span class=\"token operator\">=</span> <span class=\"token function\">askAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Call askAge()</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"User 2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> age2 <span class=\"token operator\">=</span> <span class=\"token function\">askAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Call askAge() again</span>\n\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"User 1 is \"</span> <span class=\"token operator\">&lt;&lt;</span> age1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" and User 2 is \"</span> <span class=\"token operator\">&lt;&lt;</span> age2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Output 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">User 1\nEnter your age: 12\nUser 2\nEnter your age: 18\nUser 1 is 12 and User 2 is 18</code></pre></div>\n<p>Take note on how the return value gets passed. From the local function’s <code class=\"language-text\">age</code> variable return, it gets passed on to <code class=\"language-text\">age1</code> and <code class=\"language-text\">age2</code> or even other variables that we would like.</p>\n<p>See how functions can shorten and organize code in the long run? It groups repetitive tasks to a single function that can be called multiple times in different places in your code.</p>\n<p>This next example shows a void function. We just shortened a <code class=\"language-text\">cout</code> statement into something faster to type. This is another use of functions, it can save us time and also save us from confusion when writing complex processes that we know for sure we’re going to repeat or reuse someplace else. Instead of re-writing that complex process at every place, writing a function then calling it multiple times can save us time. </p>\n<p>Example 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Happy birthday!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Output 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Happy birthday!\nHappy birthday!\nHappy birthday!</code></pre></div>\n<h2 id=\"parameters-in-functions\" style=\"position:relative;\"><a href=\"#parameters-in-functions\" aria-label=\"parameters in functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameters in Functions</h2>\n<p>Functions can also take in parameters. Think of them as inputs in a function. In the next example we’ll make a function that squares (raises to the power of 2) an integer inputted by a user.</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> givenNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> squaredNum <span class=\"token operator\">=</span> givenNumber <span class=\"token operator\">*</span> givenNumber<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Multiply whatever value the parameter is by itself</span>\n  <span class=\"token keyword\">return</span> squaredNum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> input<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Input a number: \"</span><span class=\"token punctuation\">;</span>\n  cin <span class=\"token operator\">>></span> input<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> answer <span class=\"token operator\">=</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Square our input and store it to the variable answer</span>\n\n  <span class=\"token comment\">// Print out the variable answer</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The square of the number you inputted is \"</span> <span class=\"token operator\">&lt;&lt;</span> answer<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"related\" style=\"position:relative;\"><a href=\"#related\" aria-label=\"related permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related:</h2>\n<ul>\n<li><a href=\"/posts/cpp-hello-world\">Hello World</a></li>\n<li><a href=\"/posts/cpp-input-output\">Input and Output</a></li>\n<li><a href=\"/posts/cpp-variables\">Variables and Data Types</a></li>\n<li><a href=\"/posts/cpp-arrays\">Arrays</a></li>\n</ul>","fields":{"slug":"/posts/cpp-functions","tagSlugs":["/tag/c/","/tag/tutorial/","/tag/functions/"]},"frontmatter":{"date":"2020-09-30T12:50:03","description":"A function is multiple statements or other functions that are grouped into one. When it is called, the statements and other functions inside are ran.","tags":["C++","Tutorial","Functions"],"title":"Functions","socialImage":null}}},"pageContext":{"slug":"/posts/cpp-functions"}},"staticQueryHashes":["251939775","3942705351","401334301"]}