{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/cpp-while-loop","result":{"data":{"markdownRemark":{"id":"80c731ec-7a62-5254-97a3-6940c066e290","html":"<ul>\n<li><a href=\"#basic-syntax\">Basic Syntax</a></li>\n<li><a href=\"#advanced-use-cases\">Advanced Use Cases</a></li>\n<li><a href=\"#related\">Related</a></li>\n</ul>\n<h2 id=\"basic-syntax\" style=\"position:relative;\"><a href=\"#basic-syntax\" aria-label=\"basic syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic Syntax</h2>\n<p>While loops first test the condition before running whats inside its scope. Following the same logic with if statements, while that condition is true, the loop will continue to run.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The condition is always true, the loop will run forever</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Infinite loop!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Stop infinite loops by pressing <code class=\"language-text\">CTRL + C</code></strong></p>\n<h2 id=\"advanced-use-cases\" style=\"position:relative;\"><a href=\"#advanced-use-cases\" aria-label=\"advanced use cases permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Advanced Use Cases</h2>\n<p>In this section we’ll make a program that counts from 0 to 25. We first need to have a variable because we need something to increase by 1 every iteration, and then the while loop should check if that variable is still less than 25.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// We will start from 0</span>\n    <span class=\"token comment\">// If counter is below or equal to 25, run</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>counter <span class=\"token operator\">&lt;=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        cout <span class=\"token operator\">&lt;&lt;</span> counter <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        counter<span class=\"token operator\">++</span> <span class=\"token comment\">// The ++ means increase this variable by 1</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"the-program-does-these-steps\" style=\"position:relative;\"><a href=\"#the-program-does-these-steps\" aria-label=\"the program does these steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The program does these steps:</h3>\n<ol>\n<li>Set the counter to 0</li>\n<li>Check if the counter is less than or equal to 25, if it is go to step 3, if it’s greater than 25, go to step 6</li>\n<li>Output the current value of `the counter</li>\n<li>Increase the counter by 1</li>\n<li>Go back to step 2</li>\n<li>End the program</li>\n</ol>\n<h2 id=\"related\" style=\"position:relative;\"><a href=\"#related\" aria-label=\"related permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related:</h2>\n<ul>\n<li><a href=\"/posts/cpp-input-output\">Input and Output</a></li>\n<li><a href=\"/posts/cpp-variables\">Variables and Data Types</a></li>\n<li><a href=\"/posts/cpp-if-statements-advanced\">If Statements 2</a></li>\n<li><a href=\"/posts/cpp-for-loop\">For Loop</a></li>\n<li><a href=\"/posts/cpp-do-while-loop\">Do While Loop</a></li>\n</ul>","fields":{"slug":"/posts/cpp-while-loop","tagSlugs":["/tag/c/","/tag/tutorial/","/tag/while/","/tag/flow/","/tag/loop/"]},"frontmatter":{"date":"2020-09-21T12:50:03","description":"While loops check the condition before proceeding with an iteration of the code inside its scope. Syntax: while (condition) { cout << \"something\"; }","tags":["C++","Tutorial","While","Flow","Loop"],"title":"While Loop","socialImage":null}}},"pageContext":{"slug":"/posts/cpp-while-loop"}},"staticQueryHashes":["251939775","3942705351","401334301"]}