{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/cpp-switch-statements","result":{"data":{"markdownRemark":{"id":"e430fe67-66f7-5f05-8c24-26737ea1b25c","html":"<ul>\n<li><a href=\"#syntax\">Syntax</a></li>\n<li>\n<p><a href=\"#making-a-selection-menu\">Making a Selection Menu</a></p>\n<ul>\n<li><a href=\"#removing-the-break-statement\">Removing the break statement</a></li>\n</ul>\n</li>\n<li><a href=\"#related\">Related</a></li>\n</ul>\n<p>Switch statements are an alternative to daisy-chaining if-else statements. It takes in a case variable then compares its value to predetermined cases then runs code depending on which cases match.</p>\n<h2 id=\"syntax\" style=\"position:relative;\"><a href=\"#syntax\" aria-label=\"syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Syntax</h2>\n<p>Declaration Syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>caseVar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> caseMatch1<span class=\"token operator\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> caseMatch2<span class=\"token operator\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">case</span> caseMatch3<span class=\"token operator\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">switch(caseVar)</code> - caseVar can be any previously declared variable; this is the variable that the switch statement will compare to the predetermined cases</li>\n<li><code class=\"language-text\">case caseMatch1:</code> - the program will check if the value of caseVar returns the same thing as caseMatch1, if it is, it runs that case.</li>\n<li><code class=\"language-text\">break</code> - the break statement escapes the switch statement; it tells the program that after running the statements in that case to not check the other cases if they match as well. <code class=\"language-text\">break</code> <strong>is optional</strong></li>\n<li><code class=\"language-text\">default:</code> - the program runs the statements under the default case when no other cases matche; <strong>having a default case is optional</strong></li>\n</ol>\n<p>Switch statements do the exact same thing as the code below. It’s up to you to determine which among the two results in cleaner code.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>caseVar <span class=\"token operator\">==</span> caseMatch1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>caseVar <span class=\"token operator\">==</span> caseMatch2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>caseVar <span class=\"token operator\">==</span> caseMatch3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"making-a-selection-menu\" style=\"position:relative;\"><a href=\"#making-a-selection-menu\" aria-label=\"making a selection menu permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Making a Selection Menu</h2>\n<p>With console applications, you don’t have much of a choice besides a crude menu system that uses numbers for users to navigate. Switch statements are commonly found in these kinds of applications.</p>\n<p>Example 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> choice<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> answer<span class=\"token punctuation\">;</span>\n\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Calculator v0.1 beta\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Choose an operation\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[1] Addition\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[2] Subtraction\"</span> <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[0] Exit Program\"</span> <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n  cin <span class=\"token operator\">>></span> choice<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ask for user input and store it to choice</span>\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Case depends on the variable choice</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[Addition] Input 2 numbers\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Num1: \"</span><span class=\"token punctuation\">;</span>\n      cin <span class=\"token operator\">>></span> num1<span class=\"token punctuation\">;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Num2: \"</span><span class=\"token punctuation\">;</span>\n      cin <span class=\"token operator\">>></span> num2<span class=\"token punctuation\">;</span>\n\n      answer <span class=\"token operator\">=</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> answer <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Exit the switch statement after above code</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[Subtraction] Input 2 numbers\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Num1: \"</span><span class=\"token punctuation\">;</span>\n      cin <span class=\"token operator\">>></span> num1<span class=\"token punctuation\">;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Num2: \"</span><span class=\"token punctuation\">;</span>\n      cin <span class=\"token operator\">>></span> num2<span class=\"token punctuation\">;</span>\n\n      answer <span class=\"token operator\">=</span> num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Answer: \"</span> <span class=\"token operator\">&lt;&lt;</span> answer <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Exit the switch statement after above code</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Exiting program...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// Code inside default will only run if there are no matches</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Invalid option\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Thank you for using my calculator\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// This gets ran regardless</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Output 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Calculator v0.1 beta\nChoose an operation\n[1] Addition\n[2] Subtraction\n\n[0] Exit Program\n\n2\n[Subtraction] Input 2 numbers\nNum1: 5\nNum2: 7\nAnswer: -2\nThank you for using my calculator!</code></pre></div>\n<p>Try copying and pasting the above code and play around with different inputs. </p>\n<h3 id=\"removing-the-break-statement\" style=\"position:relative;\"><a href=\"#removing-the-break-statement\" aria-label=\"removing the break statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Removing the break statement</h3>\n<p>You might also be wondering what happens if you don’t put break statements in switches. See what happens in the example below:</p>\n<p>Example 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> choice<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> answer<span class=\"token punctuation\">;</span>\n\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Calculator v0.1 beta\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Choose an operation\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[1] Addition\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[2] Subtraction\"</span> <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[0] Exit Program\"</span> <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n  cin <span class=\"token operator\">>></span> choice<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ask for user input and store it to choice</span>\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Case depends on the variable choice</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[Addition] Input 2 numbers\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Num1: \"</span><span class=\"token punctuation\">;</span>\n      cin <span class=\"token operator\">>></span> num1<span class=\"token punctuation\">;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Num2: \"</span><span class=\"token punctuation\">;</span>\n      cin <span class=\"token operator\">>></span> num2<span class=\"token punctuation\">;</span>\n\n      answer <span class=\"token operator\">=</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> answer <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[Subtraction] Input 2 numbers\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Num1: \"</span><span class=\"token punctuation\">;</span>\n      cin <span class=\"token operator\">>></span> num1<span class=\"token punctuation\">;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Num2: \"</span><span class=\"token punctuation\">;</span>\n      cin <span class=\"token operator\">>></span> num2<span class=\"token punctuation\">;</span>\n\n      answer <span class=\"token operator\">=</span> num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Answer: \"</span> <span class=\"token operator\">&lt;&lt;</span> answer <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Exiting program...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Invalid option\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Thank you for using my calculator\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// This gets ran regardless</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Output 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Calculator v0.1 beta\nChoose an operation\n[1] Addition\n[2] Subtraction\n\n[0] Exit Program\n\n1\n[Addition] Input 2 numbers\nNum1: 4\nNum2: 5\nAnswer: 9\nInvalid option\nThank you for using my calculator!</code></pre></div>\n<p>Removing the break statements makes the switch statement continue until all matches are satisfied, in our situation, the next matching case will be the default case. Most of the time this isn’t what you intend, so most of the time the break statements are at the end of each case except the default.</p>\n<h2 id=\"related\" style=\"position:relative;\"><a href=\"#related\" aria-label=\"related permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related:</h2>\n<ul>\n<li><a href=\"/posts/cpp-input-output\">Input and Output</a></li>\n<li><a href=\"/posts/cpp-variables\">Variables and Data Types</a></li>\n<li><a href=\"/posts/cpp-if-statements\">If Statements</a></li>\n<li><a href=\"/posts/cpp-if-statements-advanced\">If Statements Advanced</a></li>\n</ul>","fields":{"slug":"/posts/cpp-switch-statements","tagSlugs":["/tag/c/","/tag/tutorial/","/tag/switch/","/tag/flow/"]},"frontmatter":{"date":"2020-10-01T16:25:03+08:00","description":"Switch statements are an alternative to daisy-chaining if-else statements. It takes in a case variable then compares its value to predetermined cases then runs code depending on which cases match.","tags":["C++","Tutorial","Switch","Flow"],"title":"Switch Statements","socialImage":null}}},"pageContext":{"slug":"/posts/cpp-switch-statements"}},"staticQueryHashes":["251939775","3942705351","401334301"]}