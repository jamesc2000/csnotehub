{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/cpp-reading-and-writing-files","result":{"data":{"markdownRemark":{"id":"9e83e12c-50f3-58c7-83d1-b3c5553e822b","html":"<ul>\n<li><a href=\"#syntax\">Syntax</a></li>\n<li><a href=\"#open-parameter-flags\">open() Parameter Flags</a></li>\n<li><a href=\"#error-handling\">Error Handling</a></li>\n<li><a href=\"#related\">Related</a></li>\n</ul>\n<p>The fstream class in c++ enables us to input and output to a file stored on the disk. Similar to how iostream is used in console input/output, fstream can do the same but to files.</p>\n<h2 id=\"syntax\" style=\"position:relative;\"><a href=\"#syntax\" aria-label=\"syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Syntax</h2>\n<p>To use <code class=\"language-text\">fstream</code> we need to include it in our header includes.</p>\n<p>If you read our <a href=\"/posts/cpp-input-output\">C++ Input and Output Tutorial</a>, then you might be already familiar with <code class=\"language-text\">iostream</code>. In this tutorial we will use both <code class=\"language-text\">iostream</code> and <code class=\"language-text\">fstream</code>.</p>\n<p>For writing to a file:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ofstream fileName<span class=\"token punctuation\">;</span>\n  fileName<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  fileName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello file!\\n\"</span><span class=\"token punctuation\">;</span>\n\n  fileName<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For reading from a file:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span> <span class=\"token comment\">// This header is necessary for getline()</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ifstream fileName<span class=\"token punctuation\">;</span>\n  fileName<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  string fileContents<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> fileContents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The file contained: \"</span> <span class=\"token operator\">&lt;&lt;</span> fileContents<span class=\"token punctuation\">;</span>\n\n  fileName<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you are both reading and writing:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span> <span class=\"token comment\">// This header is necessary for getline()</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fstream fileName<span class=\"token punctuation\">;</span>\n  fileName<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  fileName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Some text\\n\"</span><span class=\"token punctuation\">;</span>\n\n  string fileContents<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> fileContents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The file contained: \"</span> <span class=\"token operator\">&lt;&lt;</span> fileContents<span class=\"token punctuation\">;</span>\n\n  fileName<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">fstream</code> - the fstream header (filestream) is necessary for doing operations with files</li>\n<li><code class=\"language-text\">fstream fileName</code> - declare fileName as a new file stream\n<em>fileName can be any valid variable name, for better readability try to match it with the filename of your file</em></li>\n<li><code class=\"language-text\">fileName.open(string)</code> - opens your file from the disk, if writing, the file will automatically be created</li>\n<li><code class=\"language-text\">fileName &lt;&lt; &quot;Hello world!&quot;</code> - follows the same syntax as console input/output</li>\n<li><code class=\"language-text\">string fileContents</code> - declares an empty variable to be used later</li>\n<li><code class=\"language-text\">getline(fileName, fileContents)</code> - reads the current line from the object <code class=\"language-text\">fileName</code> and stores it to the variable <code class=\"language-text\">fileContents</code></li>\n<li><code class=\"language-text\">cout &lt;&lt; fileContents</code> - outputs the data inside the variable <code class=\"language-text\">fileContents</code> to the console</li>\n<li><code class=\"language-text\">fileName.close()</code> - closing files after using them is a good practice as it frees up memory</li>\n</ol>\n<h2 id=\"open-parameter-flags\" style=\"position:relative;\"><a href=\"#open-parameter-flags\" aria-label=\"open parameter flags permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>open() Parameter Flags</h2>\n<p>The method <code class=\"language-text\">fstream.open()</code> can take 2 parameters:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">fstream fileName\nfileName<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename.txt\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>in <span class=\"token operator\">|</span> ios<span class=\"token operator\">::</span>out <span class=\"token operator\">|</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span></code></pre></div>\n<p>The second parameter of the method can take the following:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">ios::in</td>\n<td>Opens for input operations. Not necessary when using ifstream</td>\n</tr>\n<tr>\n<td align=\"right\">ios::out</td>\n<td>Opens for output operations. Not necessary when using ofstream</td>\n</tr>\n<tr>\n<td align=\"right\">ios::binary</td>\n<td>Open in binary mode. For non-text files</td>\n</tr>\n<tr>\n<td align=\"right\">ios::ate</td>\n<td>Set initial position at end of file</td>\n</tr>\n<tr>\n<td align=\"right\">ios::app</td>\n<td>Append to file. All outputs automatically appended to the end of file</td>\n</tr>\n<tr>\n<td align=\"right\">ios::trunc</td>\n<td>Remove existing contents when opened</td>\n</tr>\n</tbody>\n</table>\n<p>You can mix and match these parameters to your liking</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">fstream testFile\ntestFile<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testfile.txt\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>app <span class=\"token operator\">|</span> ios<span class=\"token operator\">::</span>out<span class=\"token punctuation\">)</span></code></pre></div>\n<p>By default, <code class=\"language-text\">fstream</code> enables us to do both input and output. But in our case, we specified only <code class=\"language-text\">ios::out</code> so we can only write to the file.</p>\n<p>When we write to testfile.txt, all new data will automatically added at the end of the file.</p>\n<h2 id=\"error-handling\" style=\"position:relative;\"><a href=\"#error-handling\" aria-label=\"error handling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Error Handling</h2>\n<p>In the event that the file fails to open, we should handle it accordingly</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fstream myFile<span class=\"token punctuation\">;</span>\n  myFile<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myfile.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do stuff</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Unable to open file\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">is_open()</code> is a function that returns a boolean. <code class=\"language-text\">true</code> if the file is open, <code class=\"language-text\">false</code> if the file is not open.</p>\n<h2 id=\"related\" style=\"position:relative;\"><a href=\"#related\" aria-label=\"related permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related:</h2>\n<ul>\n<li><a href=\"/posts/cpp-input-output\">Input and Output</a></li>\n<li><a href=\"/posts/cpp-variables\">Variables and Data Types</a></li>\n<li><a href=\"/posts/cpp-if-statements-advanced\">If Statements Advanced</a></li>\n</ul>","fields":{"slug":"/posts/cpp-reading-and-writing-files","tagSlugs":["/tag/c/","/tag/tutorial/","/tag/switch/","/tag/flow/"]},"frontmatter":{"date":"2020-10-26T16:25:03+08:00","description":"The fstream class in c++ enables us to input and output to a file stored on the disk. Similar to how iostream is used in console input/output, fstream can do the same but to files.","tags":["C++","Tutorial","Switch","Flow"],"title":"Reading and Writing Files","socialImage":null}}},"pageContext":{"slug":"/posts/cpp-reading-and-writing-files"}},"staticQueryHashes":["251939775","3942705351","401334301"]}